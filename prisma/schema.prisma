// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  phone         String?   @unique
  name          String?
  UDID          String?
  shortCode     String?
  shortCodeInit DateTime  @default(now())
  active        Boolean   @default(true)
  patinets      Patient[]
  files         File[]
  visits        Visit[]
  drugs         Drug[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Book          Book[]
  expense       Expense[]
}

model Patient {
  id        Int       @id @default(autoincrement())
  name      String
  phone     String?
  birthDate String?
  gender    String    @default("male")
  address   String?
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  files     File[]
  visits    Visit[]
  invoices  Invoice[]
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Book      Book[]
}

model File {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  patient   Patient? @relation(fields: [patientId], references: [id])
  patientId Int?
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Visit {
  id        Int      @id @default(autoincrement())
  note      String?
  drugs     Json[]   @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  patient   Patient? @relation(fields: [patientId], references: [id])
  patientId Int?
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model Drug {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  color     String   @default("#EEEEEE")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model DrugStore {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Book {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int
  patient   Patient?   @relation(fields: [patientId], references: [id])
  patientId Int
  number    Int?
  date      DateTime
  note      String?
  status    BookStatus @default(PENDING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Invoice {
  id        Int      @id @default(autoincrement())
  amount    Float
  service   String
  note      String?
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Expense {
  id        Int      @id @default(autoincrement())
  name      String?
  amount    Float
  note      String?
  date      DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum BookStatus {
  PENDING
  CANCELED
  DONE
}
